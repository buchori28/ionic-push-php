<?php

namespace Tomloprod\IonicApi\Api;

/**
 * Class DeviceTokens
 *
 * Stores ionic push api methods related to device tokens collection.
 * More info: https://docs.ionic.io/api/endpoints/push.html
 *
 * @package Tomloprod\IonicApi\Api
 * @author Tomás L.R (@tomloprod)
 * @author Ramon Carreras (@ramoncarreras)
 */
class DeviceTokens extends Request {

    private static $endPoints = [
        'list' => '/push/tokens', // GET
        'create' => '/push/tokens', // POST
        'retrieve' => '/push/tokens/:token_id', // GET
        'update' => '/push/tokens/:token_id', // PATCH
        'delete' => '/push/tokens/:token_id', // DELETE,
        'listAssociatedUsers' =>'/push/tokens/:token_id/users', // GET
        'associateUser' =>'/push/tokens/:token_id/users/:user_id', // POST
        'dissociateUser' =>'/push/tokens/:token_id/users/:user_id', // DELETE
    ];

    /**
     * Paginated listing of tokens.
     *
     * @param array $parameters
     * @param boolean $decodeResponse - Indicates whether the JSON response will be converted to a PHP variable before return.	 
     * @return array|object|null $response - An array when $decodeResponse is false, an object when $decodeResponse is true, and null when $decodeResponse is true and there is no data on response.
     */
    public function paginatedList($parameters = [], $decodeResponse = true) {
        $response = $this->sendRequest(
            self::METHOD_GET, 
            self::$endPoints['list'] . '?' . http_build_query($parameters)
        );
        return ($decodeResponse) ? self::decodeResponse($response) : $response;
    }


    /**
     * Saves a device token that was previously generated by a device platform.
     *
     * @param array $parameters
     * @return array
     */
    public function create($parameters) {
        return $this->sendRequest(
            self::METHOD_POST, 
            self::$endPoints['create'] . '?' . http_build_query($parameters)
        );
    }

    /**
     * Get information about a specific Token.
     *
     * @param string $deviceToken - Device token
     * @param boolean $decodeResponse - Indicates whether the JSON response will be converted to a PHP variable before return.	 
     * @return array|object|null $response - An array when $decodeResponse is false, an object when $decodeResponse is true, and null when $decodeResponse is true and there is no data on response.
     */
    public function retrieve($deviceToken, $decodeResponse = true) {
        $response = $this->prepareRequest(
            self::METHOD_GET, 
            $deviceToken, 
            self::$endPoints['retrieve']
        );
	return ($decodeResponse) ? self::decodeResponse($response) : $response;
    }

    /**
     * Updates a token.
     *
     * @param string $deviceToken - Device token
     * @param array $parameters
     * @return array
     */
    public function update($deviceToken, $parameters) {
        return $this->prepareRequest(
            self::METHOD_PATCH, 
            $deviceToken, 
            self::$endPoints['update'] . '?' . http_build_query($parameters)
        );
    }

    /**
     * Delete a device related to the device token.
     *
     * @param string $deviceToken - Device token
     * @return boolean
     */
    public function delete($deviceToken) {
        $response = $this->prepareRequest(
            self::METHOD_DELETE, 
            $deviceToken, 
            self::$endPoints['delete']
        );
	return (empty($response)) ? true : false;
    }

    /**
     * List users associated with the indicated token
     *
     * @param string $deviceToken - Device token
	 * @param array $parameters - Query parameters (pagination).
     * @param boolean $decodeResponse - Indicates whether the JSON response will be converted to a PHP variable before return.	 
     * @return array|object|null $response - An array when $decodeResponse is false, an object when $decodeResponse is true, and null when $decodeResponse is true and there is no data on response.
     */
    public function listAssociatedUsers($deviceToken, $parameters = [], $decodeResponse = true) {
        $response = $this->prepareRequest(
            self::METHOD_GET, 
            $deviceToken, 
            self::$endPoints['listAssociatedUsers'] . '?' .  http_build_query($parameters)
        );
	return ($decodeResponse) ? self::decodeResponse($response) : $response;
    }

    /**
     * Associate the indicated user with the indicated device token
     *
     * @param string $deviceToken - Device token
     * @param string $userId - User id
     * @return boolean
     */
    public function associateUser($deviceToken, $userId) {
        // Replace :user_id by $userId
        $endPoint = str_replace(':user_id', $userId, self::$endPoints['associateUser']);
        $response = $this->prepareRequest(
            self::METHOD_POST, 
            $deviceToken,
            $endPoint
        );
	return (empty($response)) ? true : false;
    }

    /**
     * Dissociate the indicated user with the indicated device token
     *
     * @param string $deviceToken - Device token
     * @param string $userId - User id
     * @return boolean
     */
    public function dissociateUser($deviceToken, $userId) {
        // Replace :user_id by $userId
        $endPoint = str_replace(':user_id', $userId, self::$endPoints['dissociateUser']);
        $response = $this->prepareRequest(
            self::METHOD_DELETE, 
            $deviceToken, 
            $endPoint
        );
	return (empty($response)) ? true : false;
    }

    /**
     * Replace device token by token id —md5 of device token— and send to the Ionic Push API.
     *
     * @private
     * @param string $method
     * @param string $deviceToken
     * @param string $endPoint
     * @return array
     */
    private function prepareRequest($method, $deviceToken, $endPoint) {
        $tokenId = md5($deviceToken);
        return $this->sendRequest(
            $method, 
            str_replace(':token_id', $tokenId, $endPoint)
        );
    }

}
